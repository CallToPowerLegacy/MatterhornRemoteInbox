/*
 * Copyright 2013-2015 Denis Meyer
 * All rights reserved.
 */
package de.calltopower.mhri.gui;

import java.awt.Component;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import de.calltopower.mhri.application.api.Inbox;
import de.calltopower.mhri.application.api.Recording;
import de.calltopower.mhri.application.api.RecordingFile;
import de.calltopower.mhri.application.api.RemoteInboxApplication;
import de.calltopower.mhri.util.Constants;
import de.calltopower.mhri.util.MHRIFileUtils;

/**
 * InboxInformation
 *
 * @date 09.02.2013
 *
 * @author Denis Meyer (calltopower88@gmail.com)
 */
public class InboxInformation extends javax.swing.JFrame {

    private final MHRIFocusTraversalPolicy traversalPolicy;

    public InboxInformation(RemoteInboxApplication application, Inbox inbox) {
        initComponents();

        this.setTitle(Constants.getInstance().getLocalizedString("InboxInformation"));
        this.label_string_name.setText(Constants.getInstance().getLocalizedString("Name") + ":");
        this.label_string_path.setText(Constants.getInstance().getLocalizedString("Path") + ":");
        this.label_string_nrOfRecs.setText(Constants.getInstance().getLocalizedString("NumberOfRecordings") + ":");
        this.label_string_workflowID.setText(Constants.getInstance().getLocalizedString("WorkflowID") + ":");
        this.button_ctc_name.setText(Constants.getInstance().getLocalizedString("CopyKey"));
        this.button_ctc_path.setText(Constants.getInstance().getLocalizedString("CopyKey"));
        this.button_ctc_wid.setText(Constants.getInstance().getLocalizedString("CopyKey"));

        this.setLocationRelativeTo(null);

        this.textfield_name.setText(inbox.getName());
        this.textfield_path.setText(inbox.getPath());

        boolean nonDefaultWorkflow = false;
        double fileSize = 0;
        for (Recording recording : inbox.getRecordings()) {
            for (RecordingFile rf : recording.getFiles()) {
                File pfile = new File(rf.getPath()).getAbsoluteFile();
                fileSize += pfile.length();
            }
            String rwfID = recording.getWorkflowId();
            if (!rwfID.isEmpty() && !rwfID.equals("")) {
                nonDefaultWorkflow = true;
            }
        }
        int nrOfRecs = inbox.getRecordings().length;
        String nrOfRecsSize = "";
        if (nrOfRecs > 0) {
            nrOfRecsSize = " (" + MHRIFileUtils.getInstance().getFormattedSize(fileSize) + ")";
        }
        this.label_nrOfRecs.setText(nrOfRecs + nrOfRecsSize);
        String wfID = nonDefaultWorkflow ? "[" + Constants.getInstance().getLocalizedString("DefinedPerRecording") + "]" : inbox.getWorkflowId();
        wfID = (wfID.isEmpty() || wfID.equals("")) ? application.getConfig().get(Constants.PROPKEY_DEFAULT_WORKFLOW) : wfID;
        this.textfield_workflowID.setText(wfID);
        this.textfield_name.setEditable(false);
        this.textfield_path.setEditable(false);
        this.textfield_workflowID.setEditable(false);

        this.panel_main.requestFocus();

        ArrayList<Component> al = new ArrayList<>();
        al.add(panel_main);
        al.add(panel_inner);
        al.add(textfield_name);
        al.add(textfield_path);
        al.add(textfield_workflowID);
        al.add(button_ctc_name);
        al.add(button_ctc_path);
        al.add(button_ctc_wid);

        LinkedList<Component> componentList = new LinkedList<>();
        componentList.add(button_ctc_name);
        componentList.add(button_ctc_path);
        componentList.add(button_ctc_wid);
        traversalPolicy = new MHRIFocusTraversalPolicy(componentList);
        this.setFocusTraversalPolicy(traversalPolicy);
        button_ctc_name.requestFocus();

        final JFrame win = this;
        KeyAdapter ka = new KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    win.dispose();
                }
            }
        };
        for (Component c : al) {
            c.addKeyListener(ka);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panel_main = new javax.swing.JPanel();
        panel_inner = new javax.swing.JPanel();
        label_string_name = new javax.swing.JLabel();
        textfield_name = new javax.swing.JTextField();
        button_ctc_name = new javax.swing.JButton();
        label_string_path = new javax.swing.JLabel();
        textfield_path = new javax.swing.JTextField();
        button_ctc_path = new javax.swing.JButton();
        label_string_nrOfRecs = new javax.swing.JLabel();
        label_nrOfRecs = new javax.swing.JLabel();
        label_string_workflowID = new javax.swing.JLabel();
        textfield_workflowID = new javax.swing.JTextField();
        button_ctc_wid = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Inbox information");
        setMinimumSize(new java.awt.Dimension(679, 141));
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        panel_main.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
        panel_main.setLayout(new java.awt.GridBagLayout());

        panel_inner.setLayout(new java.awt.GridBagLayout());

        label_string_name.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        panel_inner.add(label_string_name, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panel_inner.add(textfield_name, gridBagConstraints);

        button_ctc_name.setText("Copy to clipboard");
        button_ctc_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_ctc_nameActionPerformed(evt);
            }
        });
        button_ctc_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                button_ctc_nameKeyReleased(evt);
            }
        });
        panel_inner.add(button_ctc_name, new java.awt.GridBagConstraints());

        label_string_path.setText("Path:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        panel_inner.add(label_string_path, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panel_inner.add(textfield_path, gridBagConstraints);

        button_ctc_path.setText("Copy to clipboard");
        button_ctc_path.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_ctc_pathActionPerformed(evt);
            }
        });
        button_ctc_path.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                button_ctc_pathKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        panel_inner.add(button_ctc_path, gridBagConstraints);

        label_string_nrOfRecs.setText("Number of recordings:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 5);
        panel_inner.add(label_string_nrOfRecs, gridBagConstraints);

        label_nrOfRecs.setText("unknown");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        panel_inner.add(label_nrOfRecs, gridBagConstraints);

        label_string_workflowID.setText("Workflow ID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        panel_inner.add(label_string_workflowID, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panel_inner.add(textfield_workflowID, gridBagConstraints);

        button_ctc_wid.setText("Copy to clipboard");
        button_ctc_wid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_ctc_widActionPerformed(evt);
            }
        });
        button_ctc_wid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                button_ctc_widKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        panel_inner.add(button_ctc_wid, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panel_main.add(panel_inner, gridBagConstraints);

        getContentPane().add(panel_main);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_ctc_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_ctc_nameActionPerformed
        StringSelection stringSelection = new StringSelection(this.textfield_name.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
        JOptionPane.showMessageDialog(
                this,
                Constants.getInstance().getLocalizedString("NameCopied_msg"),
                Constants.getInstance().getLocalizedString("NameCopied"),
                JOptionPane.INFORMATION_MESSAGE);
        this.button_ctc_name.requestFocus();
    }//GEN-LAST:event_button_ctc_nameActionPerformed

    private void button_ctc_pathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_ctc_pathActionPerformed
        StringSelection stringSelection = new StringSelection(this.textfield_path.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
        JOptionPane.showMessageDialog(
                this,
                Constants.getInstance().getLocalizedString("PathCopied_msg"),
                Constants.getInstance().getLocalizedString("PathCopied"),
                JOptionPane.INFORMATION_MESSAGE);
        this.button_ctc_path.requestFocus();
    }//GEN-LAST:event_button_ctc_pathActionPerformed

    private void button_ctc_widActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_ctc_widActionPerformed
        StringSelection stringSelection = new StringSelection(this.textfield_workflowID.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
        JOptionPane.showMessageDialog(
                this,
                Constants.getInstance().getLocalizedString("WorkflowIDCopied_msg"),
                Constants.getInstance().getLocalizedString("WorkflowIDCopied"),
                JOptionPane.INFORMATION_MESSAGE);
        this.button_ctc_wid.requestFocus();
    }//GEN-LAST:event_button_ctc_widActionPerformed

    private void button_ctc_nameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_button_ctc_nameKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            button_ctc_nameActionPerformed(null);
        }
    }//GEN-LAST:event_button_ctc_nameKeyReleased

    private void button_ctc_pathKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_button_ctc_pathKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            button_ctc_pathActionPerformed(null);
        }
    }//GEN-LAST:event_button_ctc_pathKeyReleased

    private void button_ctc_widKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_button_ctc_widKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            button_ctc_widActionPerformed(null);
        }
    }//GEN-LAST:event_button_ctc_widKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_ctc_name;
    private javax.swing.JButton button_ctc_path;
    private javax.swing.JButton button_ctc_wid;
    private javax.swing.JLabel label_nrOfRecs;
    private javax.swing.JLabel label_string_name;
    private javax.swing.JLabel label_string_nrOfRecs;
    private javax.swing.JLabel label_string_path;
    private javax.swing.JLabel label_string_workflowID;
    private javax.swing.JPanel panel_inner;
    private javax.swing.JPanel panel_main;
    private javax.swing.JTextField textfield_name;
    private javax.swing.JTextField textfield_path;
    private javax.swing.JTextField textfield_workflowID;
    // End of variables declaration//GEN-END:variables
}
